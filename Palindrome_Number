/*
Given an integer x, return true if x is palindrome integer.

An integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.
*/
#PYTHON SOLUTION
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        result = ListNode(0)
        result_tail = result
        carry = 0
                
        while l1 or l2 or carry:            
            val1  = (l1.val if l1 else 0)
            val2  = (l2.val if l2 else 0)
            carry, out = divmod(val1+val2 + carry, 10)    
                      
            result_tail.next = ListNode(out)
            result_tail = result_tail.next                      
            
            l1 = (l1.next if l1 else None)
            l2 = (l2.next if l2 else None)
               
        return result.next
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """


//JAVA SOLUTION
class Solution {
    public boolean isPalindrome(int x) {
        
        String numForward = String.valueOf(x);
        String numBackward = "";
        int numLength = numForward.length();
        for (int i=(numLength-1); i>=0; i--) {
            numBackward += numForward.charAt(i);
        }
        
        if (numForward.equals(numBackward)) {
            return true;
        }
        else {
            return false;
        }
        
    }
}
